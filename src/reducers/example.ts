import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import * as Loadings from '@/constants/loadings/example';

export interface ExampleState {
    value: number;
    status: 'idle' | 'loading' | 'failed';
    isLoading: string[];
}

const initialState: ExampleState = {
    value: 0,
    status: 'idle',
};

export const exampleSlice = createSlice({
    name: 'example',
    initialState,
    reducers: {
        getExamples: (state, { payload }: PayloadAction) => {
            if (!state.isLoading.includes(Loadings.FETCHING_EXAMPLES)) {
                state.isLoading.push(Loadings.FETCHING_EXAMPLES);
            }
        },
        increment: (state) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.value += 1;
        },
        decrement: (state) => {
            state.value -= 1;
        },
        // Use the PayloadAction type to declare the contents of `action.payload`
        incrementByAmount: (state, action: PayloadAction<number>) => {
            state.value += action.payload;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
});

export const exampleActions = exampleSlice.actions;
export default exampleSlice.reducer;
